metadata:
- description: "\n            This ruleset provides generic rules that should match
    when migrating from different server\n            to JBoss EAP 6+.\n        "
  dependencies:
    addon:
    - id: org.jboss.windup.rules,windup-rules-javaee,2.3.0.Final
    - id: org.jboss.windup.rules,windup-rules-java,2.3.0.Final
  targetTechnology:
  - id: eap
    versionRange: '[6,8)'
  - id: java-ee
    versionRange: '[6,)'
rules:
  rule:
  - when:
      javaclass:
      - location:
        - METHOD_CALL
        references: java.lang.Class.forName({*}
    perform:
      hint:
      - message: "\n                       \n                       The class is dynamically
          loaded within application. During the migration, multiple classes that are
          provided on classpath by a different server may not be present anymore.\n\n
          \                      Please review the class-loading mechanisms and ensure
          that the dynamically loaded class is available in JBoss EAP.\n                       \n
          \                    "
        link:
        - value: ""
          title: Class Loading and Modules in JBoss EAP 7
          href: https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.0/html-single/development_guide/#class_loading_and_modules
        - value: ""
          title: Class Loading and Modules in JBoss EAP 6
          href: https://access.redhat.com/documentation/en-us/JBoss_Enterprise_Application_Platform/6.4/html-single/Development_Guide/index.html#chap-Class_Loading_and_Modules
        - value: ""
          title: Article about Classloading in JBoss EAP 6
          href: https://access.redhat.com/solutions/361343
        tag:
        - classloader
        title: Dynamic class instantiation
        category-id: optional
  - when:
      javaclass:
      - location:
        - METHOD_CALL
        references: javax.naming.Context.lookup{*}
        as: default
    perform:
      iteration:
      - hint:
        - message: "\n                           \n                           This
            method lookups an object using a JNDI String. During the migration process,
            some entity JNDI bindings may change.\n                           Ensure
            that the JNDI Name does not need to change for JBoss EAP.\n\n                           *For
            Example:*\n\n                           ```java\n                           (ConnectionFactory)initialContext.lookup(\"weblogic.jms.ConnectionFactory\");\n
            \                          ```\n\n                           *should become:*\n\n
            \                          ```java\n                           (ConnectionFactory)initialContext.lookup(\"/ConnectionFactory\");\n
            \                          ```\n                           \n                        "
          link:
          - value: ""
            title: JBoss EAP 6 - JNDI Reference
            href: https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/6.4/html-single/development_guide/#chap-Remote_JNDI_Lookup
          - value: ""
            title: JNDI Changes
            href: https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/6.4/html-single/migration_guide/#sect-JNDI_Changes
          tag:
          - jndi
          title: Call of JNDI lookup
          category-id: mandatory
          effort: 1
  - when:
      javaclass:
      - location:
        - CONSTRUCTOR_CALL
        references: javax.naming.InitialContext(java.util.Hashtable{*}
        as: default
    perform:
      iteration:
      - hint:
        - message: "\n                      \n                      In JBoss EAP,
            the `InitialContext` should be instantiated with no arguments. Once an
            instance is constructed, look up the service using portable JNDI lookup
            syntax. Ensure also that in case system properties for `InitialContext`
            are provided, they do not need to be changed for the JBoss EAP.\n\n                      ```java\n
            \                     InitialContext context = new InitialContext();\n
            \                     Service service = (Service) context.lookup( \"java:app/service/\"
            + ServiceImpl.class.getSimpleName() );\n                      ```\n                      \n
            \                   "
          link:
          - value: ""
            title: Migrate Applications From Other Platforms to Use Portable JNDI
              Syntax in Red Hat JBoss Enterprise Application Platform
            href: https://access.redhat.com/articles/1496973
          tag:
          - jndi
          title: Proprietary InitialContext initialization
          category-id: mandatory
          effort: 1
  - when:
      file:
      - filename: jndi.properties
        as: default
    perform:
      iteration:
      - classification:
        - description:
          - "\n                          \n                          The JNDI automatically
            reads the application resource files from all components in the applications'
            classpaths.\n                          The JNDI then makes the properties
            from these files available to the service providers.\n\n                          Please
            ensure the property values listed in this file are available to JBoss
            EAP.\n                          \n                        "
          tag:
          - webservice
          title: JNDI properties file
          effort: 1
          category-id: mandatory
          issue-display-mode: all
  - when:
      javaclass:
      - location:
        - CONSTRUCTOR_CALL
        references: javax.management.{suffix}{*}
        as: default
    perform:
      iteration:
      - hint:
        - message: "\n                          \n                          After
            migration, some of the JMX beans provided by the previous server may not
            be present anymore.\n                          Ensure that the `javax.management.{suffix}`
            does not need to change for JBoss EAP.\n                          \n                        "
          tag:
          - jmx
          title: JMX MBean object name (javax.management.{suffix})
          category-id: mandatory
          effort: 1
    where:
    - matches:
      - value: ""
        pattern: (ObjectName)
      param: suffix
  - when:
      javaclass:
      - location:
        - CONSTRUCTOR_CALL
        references: javax.management.{suffix}{*}
        as: default
    perform:
      iteration:
      - hint:
        - message: "\n                            \n                          After
            migration, some of the JMX beans provided by the previous server may not
            be present anymore.\n                          Ensure that the `javax.management.{suffix}`
            does not need to change for JBoss EAP.\n                          \n                        "
          tag:
          - jmx
          title: JMX API connector server address (javax.management.{suffix})
          category-id: mandatory
          effort: 1
    where:
    - matches:
      - value: ""
        pattern: (remote.JMXServiceURL)
      param: suffix
  - when:
      javaclass:
      - location:
        - METHOD_CALL
        references: javax.management.remote.JMXConnectorFactory.connect({*})
        as: default
    perform:
      iteration:
      - hint:
        - message: "\n                          \n                          After
            migration, JMX connection String or parameters may be different than the
            one provided by previous server.\n                          As an example,
            `javax.management.remote.JMXConnectorFactory.PROTOCOL_PROVIDER_PACKAGES`
            will change.\n                          Ensure that any of the parameters
            does not need to change for JBoss EAP.\n                          \n                       "
          tag:
          - jmx
          title: JMX connection factory parameters
          category-id: mandatory
          effort: 1
sourceFile: http://github.com/windup/windup-rulesets/tree/master/rules/rules-reviewed/eap6/uncategorized/environment-dependent.windup.xml
