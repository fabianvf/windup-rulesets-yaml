metadata:
- description: "\n            This ruleset provides analysis with respect to API removals
    between OpenJDK 8 and 11.\n        "
  dependencies:
    addon:
    - id: org.jboss.windup.rules,windup-rules-java,3.0.0.Final
  sourceTechnology:
  - id: openjdk
    versionRange: (,8]
  targetTechnology:
  - id: openjdk
    versionRange: '[11,)'
rules:
  rule:
  - when:
      or:
      - javaclass:
        - location:
          - METHOD_CALL
          references: java.lang.Thread.stop({.+})
        - location:
          - METHOD_CALL
          references: java.lang.Thread.destroy({*})
    perform:
      hint:
      - message: "\n                        The `java.lang.Thread.stop(Throwable)`
          method has been removed, as it is dangerous for a thread to not only be
          able to directly stop another thread, but with an exception it may not expect.
          Instead, the thread should be notified to stop using a shared variable or
          `interrupt()`.\n                        The `java.lang.Thread.destroy()`
          method was never even implemented and just throws `NoSuchMethodError`.\n
          \                   "
        link:
        - value: ""
          title: Java Thread Primitive Deprecation
          href: https://docs.oracle.com/javase/7/docs/technotes/guides/concurrency/threadPrimitiveDeprecation.html
        title: Methods in `java.lang.Thread` have been removed
        category-id: mandatory
        effort: 3
  - when:
      javaclass:
      - location:
        - IMPORT
        - METHOD_CALL
        references: sun.reflect.Reflection{*}
    perform:
      hint:
      - message: "\n                        Java 9 introduced the `StackWalker API`
          to replace `sun.reflect.Reflection`. \n                        As such,
          the use of `sun.reflect.Reflection` class and particular the `getCallerClass`
          method should no longer be needed. \n                        Refer to the
          example changeset linked below.\n                    "
        link:
        - value: ""
          title: Example changeset
          href: https://hg.openjdk.java.net/openjfx/9-dev/rt/rev/70f6fa01a32c
        title: sun.reflect.Reflection class was deprecated in Java 9
        category-id: mandatory
        effort: 1
  - when:
      javaclass:
      - location:
        - IMPORT
        - ANNOTATION
        references: sun.reflect.CallerSensitive{*}
    perform:
      hint:
      - message: "\n                        `sun.reflect.CallerSensitive` annotation
          was deprecated in Java 9.\n                        Refer to the example
          changeset linked below. \n                    "
        link:
        - value: ""
          title: Example changeset
          href: https://hg.openjdk.java.net/openjfx/9-dev/rt/rev/70f6fa01a32c
        title: sun.reflect.CallerSensitive annotation was deprecated in Java 9
        category-id: mandatory
        effort: 1
  - when:
      javaclass:
      - references: javax.security.auth.Policy
    perform:
      hint:
      - message: "\n                        \n                        The `javax.security.auth.Policy`
          class has been removed.\n                        It should be replaced by
          the use of `java.security.Policy` and `java.security.ProtectionDomain`.\n
          \                       Usage of `policy.getPermissions(subject,codeSource)`
          should be  replaced with a call to\n                        policy.getPermissions
          passing in a new ProtectionDomain (see links below for details)\n                        \n
          \                   "
        link:
        - value: ""
          title: Java 10 javax.security.auth.Policy api
          href: https://docs.oracle.com/javase/10/docs/api/javax/security/auth/Policy.html
        - value: ""
          title: Java 11 java.security.Policy api
          href: https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/security/Policy.html
        title: The `javax.security.auth.Policy` class has been removed
        category-id: mandatory
        effort: 3
  - when:
      javaclass:
      - references: java.lang.SecurityManager.{method-name}({*})
    perform:
      hint:
      - message: "\n                        Due to modularisation, the methods `java.lang.SecurityManager.checkAwtEventQueueAccess()`,\n
          \                       `java.lang.SecurityManager.checkSystemClipboardAccess()`
          and\n                        `java.lang.SecurityManager.checkTopLevelWindow(java.lang.Object)`\n
          \                       have been removed, so that the core SecurityManager
          class does not depend on the AWT stack.\n\n                        Replace
          with a call to `java.lang.SecurityManager.checkPermission(java.security.Permission)`
          as follows:\n\n                        `java.lang.SecurityManager.checkAwtEventQueueAccess()`
          --> `java.lang.SecurityManager.checkPermission(new AWTPermission(\"accessEventQueue\"))`\n
          \                       `java.lang.SecurityManager.checkSystemClipboardAccess()`
          --> `java.lang.SecurityManager.checkPermission(new AWTPermission(\"accessClipboard\"))`\n
          \                       `java.lang.SecurityManager.checkTopLevelWindow(java.lang.Object)
          --> java.lang.SecurityManager.checkPermission(new AWTPermission(\"showWindowWithoutWarningBanner\"))`\n
          \                   "
        link:
        - value: ""
          title: Java 11 SecurityManager api
          href: https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/SecurityManager.html
        - value: ""
          title: Java 11 AWTPermission api
          href: https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/AWTPermission.html
        title: AWT SecurityManager method java.lang.SecurityManager.{method-name}
          has been removed in Java 11
        category-id: mandatory
        effort: 1
    where:
    - matches:
      - value: ""
        pattern: (checkAwtEventQueueAccess|checkSystemClipboardAccess|checkTopLevelWindow)
      param: method-name
  - when:
      javaclass:
      - references: java.lang.SecurityManager.checkMemberAccess({*})
    perform:
      hint:
      - message: "\n                        The implementation of `java.lang.SecurityManager.checkMemberAccess(java.lang.Class,
          int)` relies on an assumption\n                        that the caller is
          at a stack depth of 4, which is not something that can be enforced, making
          the code error-prone.\n\n                        Replace with a call to
          `java.lang.SecurityManager.checkPermission(new RuntimePermission(\"accessDeclaredMembers\"))`.\n
          \                   "
        link:
        - value: ""
          title: Java 11 SecurityManager api
          href: https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/SecurityManager.html
        title: SecurityManager method java.lang.SecurityManager.checkMemberAccess
          has been removed
        category-id: mandatory
        effort: 1
  - when:
      javaclass:
      - references: java.util.logging.LogManager.addPropertyChangeListener({*})
    perform:
      hint:
      - message: "\n                        `java.util.logging.LogManager.addPropertyChangeListener()`
          method was removed in Java 9.\n                        In order to listen
          to property change events, please consider overriding the `java.util.logging.LogManager.readConfiguration`
          methods,\n                        which previously triggered property change
          events for the registered listeners.\n                    "
        link:
        - value: ""
          title: APIs removed in JDK 9
          href: https://docs.oracle.com/en/java/javase/16/migrate/removed-apis.html#GUID-B96BD00F-12A4-493A-9907-2FFE8DA6748C
        title: The java.util.logging.LogManager.addPropertyChangeListener() method
          was removed in Java 9
        category-id: mandatory
        effort: 1
  - when:
      javaclass:
      - references: java.util.logging.LogManager.removePropertyChangeListener({*})
    perform:
      hint:
      - message: "\n                        `java.util.logging.LogManager.removePropertyChangeListener()`
          method was removed in Java 9.\n                        In order to listen
          to property change events, please consider overriding the `java.util.logging.LogManager.readConfiguration`
          methods,\n                        which previously triggered property change
          events for the registered listeners.\n                    "
        link:
        - value: ""
          title: APIs removed in JDK 9
          href: https://docs.oracle.com/en/java/javase/16/migrate/removed-apis.html#GUID-B96BD00F-12A4-493A-9907-2FFE8DA6748C
        title: The java.util.logging.LogManager.removePropertyChangeListener() method
          was removed in Java 9
        category-id: mandatory
        effort: 1
  - when:
      or:
      - javaclass:
        - references: java.util.jar.Pack200.Packer.addPropertyChangeListener({*})
        - references: java.util.jar.Pack200.Packer.removePropertyChangeListener({*})
        - references: java.util.jar.Pack200.Unpacker.addPropertyChangeListener({*})
        - references: java.util.jar.Pack200.Unpacker.removePropertyChangeListener({*})
    perform:
      hint:
      - message: "\n                        Property listener methods on `Pack200.Packer`
          and `Pack200.Unpacker` have been removed.\n                        Instead,
          a strategy based on polling the `PROGRESS` value maintained by `java.util.jar.Pack200.Packer`\n
          \                       or `java.util.jar.Pack200.Unpacker` is recommended.\n
          \                   "
        link:
        - value: ""
          title: java.util.jar.Packer API
          href: https://docs.oracle.com/javase/8/docs/api/java/util/jar/Pack200.Packer.html
        - value: ""
          title: java.util.jar.Unpacker API
          href: https://docs.oracle.com/javase/8/docs/api/java/util/jar/Pack200.Unpacker.html
        title: Property listener methods on `Pack200.Packer` and `Pack200.Unpacker`
          have been removed
        category-id: mandatory
        effort: 3
  - when:
      javaclass:
      - references: sun.misc.Unsafe.{method-name}({*})
    perform:
      hint:
      - message: "\n                        The `sun.misc.Unsafe` API is scheduled
          for removal in the long term, and some of its methods have been removed.
          In short term, please consider the following:\n\n                        -
          The `get` and `put` methods have equivalents that take long offsets (OpenJDK
          8's version of the removed methods just casts the int offsets and used the
          long versions).\n                        - `fieldOffset(Field)` should be
          replaced by `staticFieldOffset(Field)` and `ObjectFieldOffset(Field)`.\n
          \                       - `staticFieldBase(Class)` should be replaced by
          asking for a specific field with `staticFieldBase(Field)`. The removed method
          only returned the address of the first static field in the class and relied
          on the assumption that the JVM stored all statics together, which may not
          be true.\n                        - `tryMonitorEnter(Object)` and `monitorExit(Object)`
          can be replaced with use of the Java synchronized primitives, as illustrated
          in the test changes for JDK-8054494 (see links below).\n\n                        In
          the long term, please consider using Variable Handles (see the link below)\n
          \                   "
        link:
        - value: ""
          title: Test changes for JDK-8054494
          href: https://hg.openjdk.java.net/jdk9/jdk9/jdk/rev/0a0a0986400e#l2.19
        - value: ""
          title: Variable Handles
          href: https://openjdk.java.net/jeps/193
        title: Methods in `sun.misc.Unsafe` have been removed
        category-id: mandatory
        effort: 2
    where:
    - matches:
      - value: ""
        pattern: (getInt|putInt|getFloat|putFloat|getDouble|putDouble|getBoolean|putBoolean|getObject|putObject|getByte|putByte|getChar|putChar|getShort|putShort|getLong|putLong|fieldOffset|staticFieldBase|tryMonitorEnter|monitorEnter|monitorExit)
      param: method-name
  - when:
      javaclass:
      - references: sun.misc.BASE64{encoder-decoder}{*}
    perform:
      hint:
      - message: "\n                        The `sun.misc.BASE64{encoder-decoder}`
          class has been removed.  \n                        It can be replaced with
          `Base64.{encoder-decoder}` class instantiated using `java.util.Base64.getMime{encoder-decoder}()`
          method.  \n                        For further examples on how to replace
          the `BASE64{encoder-decoder}` class with `Base64.{encoder-decoder}` one,
          refer to the \"Code example\" link below.  \n                    "
        link:
        - value: ""
          title: java.util.Base64 - Javadoc
          href: https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Base64.html
        - value: ""
          title: Code example
          href: https://hg.openjdk.java.net/jdk8/jdk8/jdk/rev/9078c34437ab
        - value: ""
          title: OpenJDK - Original enhancement request
          href: https://bugs.openjdk.java.net/browse/JDK-8006182
        title: The `sun.misc.BASE64{encoder-decoder}` class has been removed
        category-id: mandatory
        effort: 1
    where:
    - matches:
      - value: ""
        pattern: (Encoder|Decoder)
      param: encoder-decoder
  - when:
      or:
      - javaclass:
        - references: java.lang.System.runFinalizersOnExit({*})
        - references: java.lang.Runtime.runFinalizersOnExit({*})
    perform:
      hint:
      - message: "\n                        The `java.lang.System.runFinalizersOnExit(boolean
          value)` and `java.lang.Runtime.runFinalizersOnExit(boolean value)`\n                        have
          been removed as they are regarded as inherently unsafe. Running finalizers
          on exit was disabled by default\n                        and enabling it
          could result in finalizers being called on live objects which are still
          being manipulated by other threads.\n\n                        Remove these
          method calls.\n                    "
        link:
        - value: ""
          title: JDK 11 removed APIs
          href: https://docs.oracle.com/en/java/javase/11/migrate/index.html#JSMIG-GUID-4B613B7E-B150-4D0A-835C-2393C60BE1F8
        title: The `runFinalizersOnExit` methods have been removed
        category-id: mandatory
        effort: 1
  - when:
      or:
      - javaclass:
        - location:
          - METHOD_CALL
          references: java.awt.Font.getPeer({*})
        - location:
          - METHOD_CALL
          references: java.awt.Component.getPeer({*})
    perform:
      hint:
      - message: "\n                            The `java.awt.Font.getPeer()` and
          `java.awt.Component.getPeer()` methods have been removed.  \n                            The
          `java.awt.peer` and `java.awt.dnd.peer` are no longer accessible and are
          considered\n                            internal implementation details,
          the API may be removed without notice or changed in non\n                            compatible
          ways.  \n                            Methods exposing this API, such as
          `java.awt.Font.getPeer()` have been removed since JDK 9.     \n                            Since
          Font rendering is platform independent, there are no substitutes for this
          method.\n                        "
        link:
        - value: ""
          title: java.awt.peer Not Accessible
          href: https://docs.oracle.com/en/java/javase/11/migrate/index.html#JSMIG-GUID-0C350BAB-F2C8-409E-AD3E-63831C684A55
        title: The `java.awt.Font.getPeer()` and `java.awt.Component.getPeer()` methods
          have been removed
        category-id: mandatory
        effort: 3
  - when:
      javaclass:
      - references: java.lang.ClassLoader
    perform:
      hint:
      - message: "\n                        The changes that were implemented in JDK
          9 may impact code that creates class loaders with null (that is, the bootstrap
          class loader)\n                        as the parent class loader and assumes
          that all platform classes are visible to the parent.\n                        Such
          code may need to be changed to use the platform class loader as the parent
          (see the links below)\n                    "
        link:
        - value: ""
          title: JDK11 New Classloader Implementations
          href: https://docs.oracle.com/en/java/javase/11/migrate/index.html#JSMIG-GUID-A868D0B9-026F-4D46-B979-901834343F9E
        - value: ""
          title: ClassLoader Constructor API
          href: https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/ClassLoader.html#%3Cinit%3E(java.lang.ClassLoader)
        title: Changes in ClassLoader hierarchy in JDK 11 may impact code
        category-id: potential
        effort: 1
sourceFile: http://github.com/windup/windup-rulesets/tree/master/rules/rules-reviewed/openjdk11/openjdk8/java-removals.windup.xml
